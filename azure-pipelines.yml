trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  acrName: processingfileacr.azurecr.io  # Azure Container Registry URL
  dockerImage: file-processing-script   # Docker image name
  imageTag: $(Build.BuildId)           # Unique tag for each build
  aksClusterName: file-processing-cluster # AKS cluster name
  azureResourceGroup: <YourResourceGroupName> # Replace with your Azure resource group
  azureSubscription: <YourAzureSubscriptionName> # Azure subscription service connection in DevOps

steps:
# Step 1: Login to Azure
- task: AzureCLI@2
  displayName: 'Login to Azure'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Logged into Azure successfully"

# Step 2: Build and Push Docker Image to ACR
- task: Docker@2
  displayName: 'Build and Push Docker Image to ACR'
  inputs:
    containerRegistry: $(acrConnection)  # Name of your ACR service connection in DevOps
    repository: $(dockerImage)          # Name of the repository in ACR
    dockerfile: '**/Dockerfile'         # Path to the Dockerfile in your repository
    buildContext: '**'
    tags: $(imageTag)                   # Use the build ID as the image tag

# Step 3: Deploy to AKS
- task: AzureCLI@2
  displayName: 'Deploy to AKS'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      # Get AKS Credentials
      az aks get-credentials --resource-group $(azureResourceGroup) --name $(aksClusterName)
      
      # Update the image in the Kubernetes deployment YAML
      kubectl set image deployment/file-processing-deployment file-processing-container=$(acrName)/$(dockerImage):$(imageTag)
      
      # Apply the Kubernetes configuration
      kubectl apply -f k8s/deployment.yaml
      
      # Check Deployment Rollout Status
      kubectl rollout status deployment/file-processing-deployment

